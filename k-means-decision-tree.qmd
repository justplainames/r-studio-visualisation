---
title: "k-means-decision-tree"
format: html
editor: visual
---

```{r}
#| warning: false
#| message: false
# install.packages("devtools")  # Install devtools package if not already installed
# devtools::install_version("knitr", version = "1.42")
library(tidyverse)
library(readxl)
library(rmapshaper)
library(sf)
library(mapview)
library(tmap)
library(lintr)
library(leaflet)
library(RColorBrewer)
library(DT)
```

# Import Indicator Files

```{r}
#mortality_rate_attributed_to_unsafe_water
mortality_rate_unsafe_water <- read_csv("data/indicator_3.9.2.csv",show_col_types = FALSE)

#Proportion_of_population_using_safely_managed_drinking_water_services
proportion_of_safe_water<- read_csv("data/indicator_6.2.1.csv",show_col_types = FALSE)

#mortality_rate_unintentional_poisoning
mortality_rate_unintentional_poisoning <- read_csv("data/indicator_3.9.3.csv",show_col_types = FALSE)

#proportion-of-population-with-basic-handwashing-facilities-on-premises-by-urban-rural-percent
population_with_basic_handwashing_facilities<- read_csv("data/indicator_6.2.1.csv",show_col_types = FALSE)
```

# Extracting Important Data

## Mortality rate with unsafe water

```{r}
mortality_rate_unsafe_water <- select(
  mortality_rate_unsafe_water,
  code = 'geoAreaCode',
  country = 'geoAreaName',
  region = 'parentName',
  iso = 'ISO3',
  MR_unsafe_water = 'latest_value'
)

mortality_rate_unsafe_water <- mortality_rate_unsafe_water %>%
  distinct()

mortality_rate_unsafe_water
```

## Proportion of proper sanitation facilities

```{r}
proportion_of_safe_water <- select(
  proportion_of_safe_water,
  code = 'geoAreaCode',
  country = 'geoAreaName',
  region = 'parentName',
  iso = 'ISO3',
  urbanisation = "location_desc",
  sanitation_access = "value_2019",
)

# Remove duplicates
proportion_of_safe_water <- proportion_of_safe_water%>%
  distinct()

proportion_of_safe_water
```

## Mortality rate with unintentional poisoning

```{r}
#| label: select specific columns for mortality rate
mortality_rate_unintentional_poisoning <- select(
  mortality_rate_unintentional_poisoning,
  code = 'geoAreaCode',
  country = 'geoAreaName',
  region = 'parentName',
  iso = 'ISO3',
  gender = 'sex_desc',
  MR_poisoning = 'value_2019'
)

# drop rows if contains at least one NA value
mortality_rate_unintentional_poisoning <- na.omit(mortality_rate_unintentional_poisoning)

# Remove duplicates
mortality_rate_unintentional_poisoning <- mortality_rate_unintentional_poisoning%>%
  distinct()

#check for empty row
any(is.na(mortality_rate_unintentional_poisoning))

mortality_rate_unintentional_poisoning
```

## Proportion of hand washing facilities

```{r}
#| label: select specific columns for population with basic handwashing facilities
population_with_basic_handwashing_facilities <- select(
  population_with_basic_handwashing_facilities,
  code = 'geoAreaCode',
  country = 'geoAreaName',
  region = 'parentName',
  iso = 'ISO3',
  urbanisation = 'location_desc',
  handwash_access = 'value_2019'
)

# drop rows if contains at least one NA value
population_with_basic_handwashing_facilities <- na.omit(population_with_basic_handwashing_facilities)

# Remove duplicates
population_with_basic_handwashing_facilities <- population_with_basic_handwashing_facilities%>%
  distinct()

#check for empty row
any(is.na(mortality_rate_unintentional_poisoning))

population_with_basic_handwashing_facilities
```

## Joining all 4 indicators

```{r}

countries_tb <- left_join(
  mortality_rate_unintentional_poisoning,
  population_with_basic_handwashing_facilities,
  by = join_by(country, iso)
)
  
countries_tb <- left_join(
  countries_tb,
  mortality_rate_unsafe_water,
  by = join_by(iso)
) 
  
countries_tb <- left_join(
  countries_tb,
  proportion_of_safe_water,
  by = join_by(iso, urbanisation)
) |>  
  mutate(
    iso = case_match(
      iso,
      "COD" ~ "ZAR",
      "ROU" ~ "ROM",
      "TLS" ~ "TMP",
      "XKX" ~ "KSV",
      .default = iso
    )
  )

countries_tb
```

## Clean data

Remove certain columns and rename column for cleaner a look

```{r}
clean_datatable <- select(countries_tb, 
                          -code.y, -code.x,
                          -region.y, -region.x,
                          -code.x.x, code.y.y, 
                          -country.x, -country.y,
                          -region.x.x, -region.y.y, 
                          -iso)  
# Rearrange
clean_datatable <- clean_datatable %>%
  select(country, 
         urbanisation, 
         gender, 
         handwash_access,  
         sanitation_access, 
         MR_poisoning, 
         MR_unsafe_water)

datatable(clean_datatable)
```

<hr/>
<hr/>
<hr/>
<hr/>
<hr/>

# K MEANS CLUSTERING
```{r}
#| warning: false
library(readr)
library(knitr)
library(dplyr)
library(factoextra)
library(cluster)
library(GGally)
library(data.table)
library(sns)
library(plotly)
library(countrycode)
library(wbstats)
library(rpart)
library(rpart.plot)
library(caret)
```

## Scaling the dataset
```{r}
kable(head(clean_datatable))

df <- clean_datatable %>%
  filter(urbanisation == "All areas", gender == "Both sexes") |>
  select(-urbanisation, -gender)

kable(head((df)))

numeric_cols <-
  c("handwash_access",
    "sanitation_access",
    "MR_poisoning",
    "MR_unsafe_water")
numeric_df <- df[numeric_cols]
scaled_df <- scale(numeric_df)
kable(head((scaled_df)))
```

## Elbow Criterion
```{r}
fviz_nbclust(scaled_df, kmeans, method = "wss")
```
** Elbow at 3, so we choose k=3**

## Do k-means clustering for dataset
```{r}
scaled_df_table <- data.table(scaled_df)
k <- kmeans(scaled_df_table, centers = 3)
scaled_df_table[, cluster := as.factor(k$cluster)]

country <- df$country
scaled_df_table_with_country <- cbind(country, scaled_df_table)
kable(head(scaled_df_table_with_country))
```

# Create pair plot highlighting clusters
```{r}
ggpair_plt <- ggpairs(
  scaled_df_table_with_country,
  aes(colour = cluster, text = country),
  diag = list(continuous = "barDiag"),
  columns = c(
    "handwash_access",
    "sanitation_access",
    "MR_poisoning",
    "MR_unsafe_water"
  ),
  columnLabels = c(
    "% Hand-wash\n Facility",
    "% Sanitation\n Services",
    "% Death by\n Posion",
    "% Death by\n Unsafe Water"
  )
)
# gg
```

```{r}
#| fig-height: 10
#| fig-width: 10
ggplotly_plot <- ggplotly(ggpair_plt, tooltip = c("country"))
ggplotly_plot
```
<br/>
**
1. Red cluster = Low sanitation and High mortality rate\
2. Green cluster = High sanitation and Low mortality rate\
3. Blue cluster = Low mortality rate
**

# Decision Tree
## Add country code to dataset
```{r}
scaled_df_table_with_cc <-
  scaled_df_table_with_country |>
  mutate(code = countrycode(country, origin = 'country.name', destination = 'wb'))
kable(head(scaled_df_table_with_cc))
```

## Add region, income grp, population to dataset
```{r}
countries_sf <- read_sf("./data/WB_countries_Admin0.geojson")
countries_sf <- st_drop_geometry(countries_sf) |>
  select(WB_A3, REGION_WB, INCOME_GRP, POP_EST)
kable(head(countries_sf))

dataset <-
  merge(scaled_df_table_with_cc,
        countries_sf,
        by.x = "code",
        by.y = "WB_A3")
kable(head(dataset))

any_na <- any(is.na(dataset))
any_na
```

## Create factor vairables for dataset
```{r}
shuffle_index <- sample(1:nrow(dataset))
dataset <- dataset[shuffle_index,]
kable(head(dataset))

column_types <- sapply(dataset, class)
print(column_types)

unique(dataset$REGION_WB)
unique(dataset$INCOME_GRP)

setnames(dataset, "INCOME_GRP", "income")
setnames(dataset, "REGION_WB", "region")
setnames(dataset, "POP_EST", "pop")

dataset <- dataset[, c("cluster", "region", "income", "pop")]

dataset$income <- factor(
  dataset$income,
  levels = c(
    '5. Low income',
    '4. Lower middle income',
    '3. Upper middle income',
    '2. High income: nonOECD'
  ),
  labels = c('low', 'lower middle', 'upper middle', 'high')
)

dataset$region <- factor(
  dataset$region,
  levels = c(
    'Sub-Saharan Africa',
    'South Asia',
    'Middle East & North Africa',
    'Europe & Central Asia',
    'East Asia & Pacific',
    'Latin America & Caribbean'
  ),
  labels = c(
    'Sub-Saharan Africa',
    'South Asia',
    'Middle East & North Africa',
    'Europe & Central Asia',
    'East Asia & Pacific',
    'Latin America & Caribbean'
  )
)

any_na <- any(is.na(dataset))
any_na

clean_dataset <- dataset
glimpse(clean_dataset)
```

## Train decision tree
```{r}
train_rows <-
  createDataPartition(clean_dataset$cluster, p = 0.75, list = FALSE)
train <- clean_dataset[train_rows,]
test <- clean_dataset[-train_rows,]

# dim(train)
# dim(test)
# prop.table(table(train$cluster))
# prop.table(table(test$cluster))

tree_model <- rpart(cluster ~ ., data = train, method = "class")
rpart.plot(tree_model, extra = 102, digits = -3)
```

# Evaluation of decision tree
## Relative importance
```{r}
rel_impt <- as.data.frame(tree_model$variable.importance)
rel_impt
```
**
Relative importance of the predictors for classification are as follows: \
- Region: 16.16 \
- Income: 7.27 \
- Population size: 7.74
**

## Prediction with decision tree
```{r}
prediction <- predict(tree_model, data = test, type = "class")
confMatrix <- table(prediction, train$cluster)
confMatrix
accuracy <- sum(diag(confMatrix)) / sum(confMatrix)
print(paste('Accuracy: ', accuracy))
```
**
For a single train-test split of [75 25], the model obtained a good prediction accuracy of 0.76.
**

## Ten-fold cross validation
```{r}
train_control <- trainControl(method = "cv",  # Use cross validation
                              number = 10)    # Use 10 folds

# tune_grid = expand.grid(cp=c(0.0001)) # complexity parameter (size of tree)

validated_tree <- train(cluster ~ .,
                        data = clean_dataset,
                        method = "rpart",
                        trControl = train_control)

validated_tree 
```
**
The accuracy for ten-fold cross validation was very low, at 0.53. \
This is probably because the dataset is too small and lacks diversity. \
Overall, the model is unable to generalize to unseen data.
**

