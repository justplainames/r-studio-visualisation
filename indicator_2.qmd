---
title: "indicator_2"
format: html
editor: visual
---

```{r}
#| warning: false
#| message: false
library(tidyverse)
library(readxl)
library(rmapshaper)
library(sf)
library(mapview)
library(tmap)
library(lintr)
library(leaflet)
library(RColorBrewer)
```

# Import data

```{r}
#mortality_rate_attributed_to_unsafe_water
mortality_rate_unsafe_water <- read_csv("data/indicator_3.9.2.csv",show_col_types = FALSE)

#Proportion_of_population_using_safely_managed_drinking_water_services
proportion_of_safe_water<- read_csv("data/indicator_6.2.1.csv",show_col_types = FALSE)

# Country levle details
countries_sf <- read_sf("../WB_countries_Admin0.geojson")
```

# Retrieve Data

## Mortality Rate due to Unsafe Water

```{r}
mortality_rate_unsafe_water <- select(
  mortality_rate_unsafe_water,
  code = 'geoAreaCode',
  country = 'geoAreaName',
  region = 'parentName',
  iso = 'ISO3',
  mortality_rate_unsafe_water = 'latest_value'
)

mortality_rate_unsafe_water <- mortality_rate_unsafe_water%>%
  distinct()

mortality_rate_unsafe_water
```

## Proportion of safe water management

```{r}
proportion_of_safe_water <- select(
  proportion_of_safe_water,
  code = 'geoAreaCode',
  country = 'geoAreaName',
  region = 'parentName',
  iso = 'ISO3',
  urbanisation = "location_desc",
  value_2019 = "value_2019"
)

proportion_of_safe_water <- proportion_of_safe_water%>%
  distinct()

proportion_of_safe_water
```

# Cleaning and fixing geometry data

```{r}
countries_boundary <- st_boundary(countries_sf)
countries_sf_simplified <- ms_simplify(countries_boundary, keep = 0.05)
countries_sf_valid <- st_make_valid(countries_sf_simplified)
countries_wrapped <- st_wrap_dateline(countries_sf_valid)
polygon <- st_polygon(x = list(rbind(c(-180.0001, 90),
                                     c(-179.9999, 90),
                                     c(-179.9999, -90),
                                     c(-180.0001, -90),
                                     c(-180.0001, 90)))) |>
  st_sfc() |>
  st_set_crs(4326)

countries_wrapped <- countries_wrapped |>
  st_difference(polygon)


land_sf <- read_sf("data/WB_Land.geojson")
land_boundary <- st_boundary(land_sf)
land_sf_simplified <- ms_simplify(land_boundary, keep = 0.05)
land_sf_valid <- st_make_valid(land_sf_simplified)
land_wrapped <- st_wrap_dateline(land_sf_valid)
polygon <- st_polygon(x = list(rbind(c(-180.0001, 90),
                                     c(-179.9999, 90),
                                     c(-179.9999, -90),
                                     c(-180.0001, -90),
                                     c(-180.0001, 90)))) |>
  st_sfc() |>
  st_set_crs(4326)

land_wrapped <- land_wrapped |>
  st_difference(polygon)

countries_wrapped <- countries_wrapped |>
  st_difference(polygon)
```

# Joining of Data

```{r}
# Washing data combined
countries_sf_water <- left_join(
  select(
    countries_wrapped,
    WB_A3
  ),
  proportion_of_safe_water,
  by = c("WB_A3" = "iso")
)
countries_sf_water

# Mortality Rate Combined
countries_sf_mortality <- left_join(
  select(
    countries_wrapped,
    WB_A3),
  mortality_rate_unsafe_water,
  by = c("WB_A3" = "iso")
)

countries_sf_mortality
```

# Creating the Maps

## Get the different values for all areas, urban and rural in water management

```{r}
countries_sf_water_all <- countries_sf_water %>% filter(!(urbanisation %in% c("Rural","Urban")))
countries_sf_water_urban <- countries_sf_water %>% filter(!(urbanisation %in% c("All area","Urban")))
countries_sf_water_rural <- countries_sf_water %>% filter(!(urbanisation %in% c("Urban","All areas")))
```

### all areas for water management

```{r}
# Load the required libraries
library(leaflet)

# Define the color palette function
colorPalette <- colorRampPalette(c("#FF6969", "#00A0D6"))


# Generate the color palette based on the number of breaks
numBreaks <- 6
colors <- colorPalette(numBreaks)

# Create a Leaflet map
all_map <- leaflet(countries_sf_water_all) %>%
  addProviderTiles(providers$CartoDB.Positron) %>%
  addPolygons(fillColor = ~colorNumeric(palette=colors, domain = c(0, 20, 40, 60, 80, 100))(value_2019),  
              fillOpacity = 0.8,
              weight = 2,
              opacity = 1,
              color = "white",
              dashArray = "3",
              highlight = highlightOptions(
                weight = 5,
                color = "#666",
                dashArray = "",
                fillOpacity = 0.7,
                bringToFront = TRUE),
              label = ~WB_A3,  
              popup = ~paste("Country Code: ", WB_A3,
                             "<br>Country: ", country,
                             "<br>Proportion of population access to safely managed drinking water service: ", value_2019))%>%
  addLegend(
    position = "bottomright",
    pal = colorNumeric(palette = colors, domain = c(0, 100)),
    values = c(0, 20, 40, 60, 80, 100),
    title = "Proportion (%)",
    labels = c("0-20", "20-40", "40-60", "60-80", "80-100"),
    opacity = 1
  )

all_map
```

### Urban areas

```{r}
# Define the color palette function
colorPalette <- colorRampPalette(c("#FF6969", "#00A0D6"))


# Generate the color palette based on the number of breaks
numBreaks <- 6
colors <- colorPalette(numBreaks)

# Create a Leaflet map
urban_map <- leaflet(countries_sf_water_urban) %>%
  addProviderTiles(providers$CartoDB.Positron) %>%
  addPolygons(fillColor = ~colorNumeric(palette=colors, domain = c(0, 20, 40, 60, 80, 100))(value_2019),  
              fillOpacity = 0.8,
              weight = 2,
              opacity = 1,
              color = "white",
              dashArray = "3",
              highlight = highlightOptions(
                weight = 5,
                color = "#666",
                dashArray = "",
                fillOpacity = 0.7,
                bringToFront = TRUE),
              label = ~WB_A3,  
              popup = ~paste("Country Code: ", WB_A3,
                             "<br>Country: ", country,
                             "<br>Proportion of population access to safely managed drinking water service: ", value_2019))%>%
  addLegend(
    position = "bottomright",
    pal = colorNumeric(palette = colors, domain = c(0, 100)),
    values = c(0, 20, 40, 60, 80, 100),
    title = "Proportion (%)",
    labels = c("0-20", "20-40", "40-60", "60-80", "80-100"),
    opacity = 1
  )

urban_map
```

### Rural
```{r}
# Define the color palette function
colorPalette <- colorRampPalette(c("#FF6969", "#00A0D6"))


# Generate the color palette based on the number of breaks
numBreaks <- 6
colors <- colorPalette(numBreaks)

# Create a Leaflet map
rural_map <- leaflet(countries_sf_water_rural) %>%
  addProviderTiles(providers$CartoDB.Positron) %>%
  addPolygons(fillColor = ~colorNumeric(palette=colors, domain = c(0, 20, 40, 60, 80, 100))(value_2019),  
              fillOpacity = 0.8,
              weight = 2,
              opacity = 1,
              color = "white",
              dashArray = "3",
              highlight = highlightOptions(
                weight = 5,
                color = "#666",
                dashArray = "",
                fillOpacity = 0.7,
                bringToFront = TRUE),
              label = ~WB_A3,  
              popup = ~paste("Country Code: ", WB_A3,
                             "<br>Country: ", country,
                             "<br>Proportion of population access to safely managed drinking water service: ", value_2019))%>%
  addLegend(
    position = "bottomright",
    pal = colorNumeric(palette = colors, domain = c(0, 100)),
    values = c(0, 20, 40, 60, 80, 100),
    title = "Proportion (%)",
    labels = c("0-20", "20-40", "40-60", "60-80", "80-100"),
    opacity = 1
  )

rural_map
```
## Create map for mortality rate

```{r}

# Define the color palette function
colorPalette <- colorRampPalette(c("#FFFFDF", "#FFEEAA", "#FFBB55", "#FF7700", "#FF4400"))


# Generate the color palette based on the number of breaks
numBreaks <- 6
colors <- colorPalette(numBreaks)

# Create a Leaflet map
mortality_mapping <- leaflet(countries_sf_mortality) %>%
  addProviderTiles(providers$CartoDB.Positron) %>%
  addPolygons(fillColor = ~colorNumeric(palette=colors, domain = c(0, 20, 40, 60, 80, 100))(mortality_rate_unsafe_water),  
              fillOpacity = 0.8,
              weight = 2,
              opacity = 1,
              color = "grey",
              dashArray = "3",
              highlight = highlightOptions(
                weight = 5,
                color = "#666",
                dashArray = "",
                fillOpacity = 0.7,
                bringToFront = TRUE),
              label = ~WB_A3,  
              popup = ~paste("Country Code: ", WB_A3,
                             "<br>Country: ", country,
                             "<br>Mortality Rate from Unsafe Sanitation and Water per 100,000: ", mortality_rate_unsafe_water))%>%
  addLegend(
    position = "bottomright",
    pal = colorNumeric(palette = colors, domain = c(0, 100)),
    values = c(0, 20, 40, 60, 80, 100),
    title = "Proportion (100, 000)",
    labels = c("0-20", "20-40", "40-60", "60-80", "80-100"),
    opacity = 1
  )

mortality_mapping
```
