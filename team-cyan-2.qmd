---
title: "csc3007-cyan2"
author: "ONG ZHEN YU BRANDON, GOH BOON CHUN, CHNG JUN JIE JEREMY, EISEN REINER BAGUILAT PERDIDO, MAGESHWARAN SO MUTHUSAMY"
format: html
number-sections: true
knitr:
  opts_chunk:
    fig.width: 7.5
    fig.height: 5
    fig.align: center
    out.width: 100%
---

```{r}
#| warning: false
library(readr)
library(ggplot2)
library(e1071)
library(readxl)
library(gridExtra)
library(tidyverse)
library(countrycode)
library(sf)
library(tmap)
library(lintr)
library(plotly)
library(MASS) # for boxcox normalisation
```

```{r}
### Read data
# https://unstats-undesa.opendata.arcgis.com/datasets/undesa::indicator-3-9-2-mortality-rate-attributed-to-unsafe-water-unsafe-sanitation-and-lack-of-hygiene-deaths-per-100-000-population/explore?location=4.310115%2C1.385045%2C3.26
death_water_hygiene <- read_csv("./data/indicator_3.9.2.csv")
# https://unstats-undesa.opendata.arcgis.com/datasets/undesa::indicator-6-1-1-proportion-of-population-using-safely-managed-drinking-water-services-by-urban-rural-percent/explore
water_services_data <- read_csv("./data/indicator_6.1.1.csv")

```

### Merge dataset

```{r}
merged_data <- merge(death_water_hygiene, water_services_data, by=c('geoAreaCode', 'geoAreaName'))
merged_data <- merged_data[!is.na(merged_data$value_2019), ] #remove NA values for 2019
# Display the first few rows of the merged dataframe
merged_data
```


### 1. Scatter plot

```{r}
# Plot the data
plot_loess <- ggplot(merged_data, aes(x = latest_value.x, y = value_2019)) +
  
  geom_point(aes(color = location_desc, 
                 shape = location_desc,
                 text = paste("Country:", geoAreaName, "<br>", "Location:", location_desc)), alpha = 0.7) +
  
  geom_smooth(data = subset(merged_data, location_desc == "All areas"),
              method = loess, se = FALSE, 
              aes(color = location_desc, weight = value_2019),
              show.legend = TRUE) +
  
  geom_smooth(data = subset(merged_data, location_desc == "Urban"),
              method = loess,
              se = FALSE,
              aes(color = location_desc, weight = value_2019),
              show.legend = TRUE) +

  geom_smooth(data = subset(merged_data, location_desc == "Rural"),
              method = loess,
              se = FALSE,
              aes(color = location_desc, weight = value_2019),
              show.legend = TRUE) +
  
  labs(x = "Mortality Rate (deaths per 100,000 population)",
       y = "Safely Managed Drinking Water Services (%)",
       title = "Correlation between Mortality Rate and Water Services (2019)",
       color = "Location Type",
       shape = "Location Type") +
  
  theme_minimal() +
  
  guides(color = guide_legend(override.aes = list(shape = 16)),
         shape = guide_legend(override.aes = list(color = "black")))


# Convert to a plotly plot
gp <- ggplotly(plot_loess, tooltip = "text")

# Print the plot
gp
```

### Correlation Empty Plot
```{r}
correlation_all <- cor(merged_data$latest_value.x[merged_data$location_desc == "All areas"], 
                       merged_data$value_2019[merged_data$location_desc == "All areas"])

correlation_urban <- cor(merged_data$latest_value.x[merged_data$location_desc == "Urban"], 
                         merged_data$value_2019[merged_data$location_desc == "Urban"])

correlation_rural <- cor(merged_data$latest_value.x[merged_data$location_desc == "Rural"], 
                         merged_data$value_2019[merged_data$location_desc == "Rural"])

blank_plot <- ggplot() +
  theme_void() +
  theme(plot.margin = margin(1, 1, 1, 1, "cm")) +
  annotate("text",
           x = 0.5,
           y = 0.5,
           label = paste("Correlation All:",
                         round(correlation_all, 2), "\n",
                         "Correlation Urban:",
                         round(correlation_urban, 2), "\n",
                         "Correlation Rural:",
                         round(correlation_rural, 2)),
           size = 5,
           color = "black",
           hjust = 0.5)

# Convert to a plotly plot
gp_text <- ggplotly(blank_plot)
gp_text
```


### 1.5 barchart and stacked barchart (without Transformation)
```{r}
stacked_bar_chart <- ggplot(merged_data, aes(x = latest_value.x, fill = location_desc)) +
  geom_histogram(position = "stack", bins = 20) +
  labs(x = "Mortality Rate (deaths per 100,000 population)",
       y = "Count",
       title = "Stacked Bar Chart of Mortality Rates") +
  theme_minimal()

#change to plotly
ggplot_stacked_bar_chart <- ggplotly(stacked_bar_chart)
ggplot_stacked_bar_chart

grouped_bar_chart <- ggplot(merged_data, aes(x = latest_value.x, fill = location_desc)) +
  geom_histogram(position = "dodge", bins = 20) +
  labs(x = "Mortality Rate (deaths per 100,000 population)",
       y = "Count",
       title = "Grouped Bar Chart of Mortality Rates") +
  theme_minimal()

# Convert to a plotly plot
ggplot_grouped_bar_chart <- ggplotly(grouped_bar_chart)
ggplot_grouped_bar_chart
```

### Histogram
```{r}
# Filter data for the histogram
merged_data_all<- subset(merged_data, location_desc == "All areas")  # change to rural or urban if you want

histogram <- ggplot(merged_data_all, aes(x = latest_value.x, 
                             text = paste("Country:", geoAreaName, 
                                          "<br>Mortality Rate:", latest_value.x))) +
  geom_histogram(bins = 50, fill = 'grey', color = 'black') +
  labs(x = 'Mortality Rate (deaths per 100,000 population)',
       y = 'Count',
       title = 'Histogram of Mortality Rates for "All" locations') +
  theme_minimal()

# Convert ggplot histogram to a plotly plot
plotly_histogram <- ggplotly(histogram, tooltip = "text")
plotly_histogram
```



### Normalise Data using BoxCox
```{r}
merged_data$latest_value.x_positive <- merged_data$latest_value.x + abs(min(merged_data$latest_value.x)) + 0.1

# Apply the Box-Cox transformation
bc_result <- boxcox(merged_data$latest_value.x_positive ~ 1, 
                    lambda = seq(-3,3,0.1))

# The optimal lambda value is the one that maximizes the log-likelihood
optimal_lambda <- bc_result$x[which.max(bc_result$y)]
print(paste("Optimal lambda value: ", optimal_lambda))

# Transform the data using the optimal lambda value
if (optimal_lambda == 0) {
  merged_data$latest_value.x_bc <- log(merged_data$latest_value.x_positive)
} else {
  merged_data$latest_value.x_bc <- (merged_data$latest_value.x_positive^optimal_lambda - 1) / optimal_lambda
}

# Shift the transformed variable to be non-negative
min_value <- min(merged_data$latest_value.x_bc)
merged_data$latest_value.x_bc <- merged_data$latest_value.x_bc + abs(min_value) + 0.1

```

### Histogram Normalised
```{r}
# Round the transformed mortality rates to the nearest whole number
merged_data$latest_value.x_bc_rounded <- round(merged_data$latest_value.x_bc)

# Convert the latest_value.x_bc_rounded variable into a categorical variable
merged_data$latest_value.x_bc_cat <- cut(merged_data$latest_value.x_bc_rounded, breaks = 50)

# Create a stacked bar chart
stacked_bar_chart_bc <- ggplot(merged_data, aes(x = latest_value.x_bc_rounded, fill = location_desc)) +
  geom_bar(position = "stack", bins =20) +
  labs(x = "Transformed Mortality Rate",
       y = "Count",
       title = "Stacked Bar Chart of Transformed Mortality Rates") +
  theme_minimal()

ggplot_stacked_bar_chart_bc <- ggplotly(stacked_bar_chart_bc)
ggplot_stacked_bar_chart_bc

# Create a grouped bar chart
grouped_bar_chart_bc <- ggplot(merged_data, aes(x = latest_value.x_bc_rounded, fill = location_desc)) +
  geom_bar(position = "dodge") +
  labs(x = "Transformed Mortality Rate",
       y = "Count",
       title = "Grouped Bar Chart of Transformed Mortality Rates") +
  theme_minimal()

# Convert to a plotly plot
ggplot_grouped_bar_chart_bc <- ggplotly(grouped_bar_chart_bc)
ggplot_grouped_bar_chart_bc
```
```{r}
# Filter data for the histogram
merged_data_all<- subset(merged_data, location_desc == "All areas") # change to rural or urban if you want

histogram_normalised <- ggplot(merged_data_all, aes(x = latest_value.x_bc, 
                             text = paste("Country:", geoAreaName, 
                                          "<br>Mortality Rate:", latest_value.x))) +
  geom_histogram(bins = 50, fill = 'grey', color = 'black') +
  labs(x = 'Mortality Rate (deaths per 100,000 population)',
       y = 'Count',
       title = 'Histogram of Mortality Rates for "All" locations') +
  theme_minimal()

# Convert ggplot histogram to a plotly plot
plotly_histogram_normalised <- ggplotly(histogram_normalised, tooltip = "text")
plotly_histogram_normalised
```






### Scatter plot Normalised

```{r}
plot_loess <- ggplot(merged_data, aes(x = latest_value.x_bc, y = value_2019)) +
  
  geom_point(aes(color = location_desc, 
                 shape = location_desc,
                 text = paste("Country:", geoAreaName, "<br>", "Location:", location_desc)), alpha = 0.7) +
  
  geom_smooth(data = subset(merged_data, location_desc == "All areas"),
              method = loess, se = FALSE, 
              aes(color = location_desc, weight = value_2019),
              show.legend = TRUE) +
  
  geom_smooth(data = subset(merged_data, location_desc == "Urban"),
              method = loess,
              se = FALSE,
              aes(color = location_desc, weight = value_2019),
              show.legend = TRUE) +

  geom_smooth(data = subset(merged_data, location_desc == "Rural"),
              method = loess,
              se = FALSE,
              aes(color = location_desc, weight = value_2019),
              show.legend = TRUE) +
  
  labs(x = "Transformed Mortality Rate (deaths per 100,000 population)",
       y = "Safely Managed Drinking Water Services (%)",
       title = "Correlation between Transformed Mortality Rate and Water Services (Normalised)",
       color = "Location Type",
       shape = "Location Type") +
  
  theme_minimal() +
  
  guides(color = guide_legend(override.aes = list(shape = 16)),
         shape = guide_legend(override.aes = list(color = "black")))


gp_normalised <- ggplotly(plot_loess, tooltip = "text")
gp_normalised
```

```{r}
correlation_all <- cor(merged_data$latest_value.x_bc[merged_data$location_desc == "All areas"], 
                       merged_data$value_2019[merged_data$location_desc == "All areas"])

correlation_urban <- cor(merged_data$latest_value.x_bc[merged_data$location_desc == "Urban"], 
                         merged_data$value_2019[merged_data$location_desc == "Urban"])

correlation_rural <- cor(merged_data$latest_value.x_bc[merged_data$location_desc == "Rural"], 
                         merged_data$value_2019[merged_data$location_desc == "Rural"])

blank_plot <- ggplot() +
  theme_void() +
  theme(plot.margin = margin(1, 1, 1, 1, "cm")) +
  annotate("text",
           x = 0.5,
           y = 0.5,
           label = paste("Correlation All:",
                         round(correlation_all, 2), "\n",
                         "Correlation Urban:",
                         round(correlation_urban, 2), "\n",
                         "Correlation Rural:",
                         round(correlation_rural, 2)),
           size = 5,
           color = "black",
           hjust = 0.5)

gp_text_normalised <- ggplotly(blank_plot)
gp_text_normalised
```

### Combining normal and unormalised plots
```{r}
combined_plot <- subplot(
  gp, gp_text, 
  gp_normalised, gp_text_normalised, 
  nrows = 2, margin = 0.05
)

# Print the combined plot
combined_plot
```


