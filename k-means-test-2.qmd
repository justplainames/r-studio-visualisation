---
title: "k-means-test-2"
format: html
editor: visual
---
```{r}
#| warning: false
#| message: false
# install.packages("devtools")  # Install devtools package if not already installed
# devtools::install_version("knitr", version = "1.42")
library(tidyverse)
library(readxl)
library(rmapshaper)
library(sf)
library(mapview)
library(tmap)
library(lintr)
library(leaflet)
library(RColorBrewer)
library(DT)
```

# Import Indicator Files

```{r}
#mortality_rate_attributed_to_unsafe_water
mortality_rate_unsafe_water <- read_csv("data/indicator_3.9.2.csv",show_col_types = FALSE)

#Proportion_of_population_using_safely_managed_drinking_water_services
proportion_of_safe_water<- read_csv("data/indicator_6.2.1.csv",show_col_types = FALSE)

#mortality_rate_unintentional_poisoning
mortality_rate_unintentional_poisoning <- read_csv("data/indicator_3.9.3.csv",show_col_types = FALSE)

#proportion-of-population-with-basic-handwashing-facilities-on-premises-by-urban-rural-percent
population_with_basic_handwashing_facilities<- read_csv("data/indicator_6.2.1.csv",show_col_types = FALSE)
```

# Extracting Important Data

## Mortality rate with unsafe water

```{r}
mortality_rate_unsafe_water <- select(
  mortality_rate_unsafe_water,
  code = 'geoAreaCode',
  country = 'geoAreaName',
  region = 'parentName',
  iso = 'ISO3',
  MR_unsafe_water = 'latest_value'
)

mortality_rate_unsafe_water <- mortality_rate_unsafe_water %>%
  distinct()

mortality_rate_unsafe_water
```

## Proportion of proper sanitation facilities

```{r}
proportion_of_safe_water <- select(
  proportion_of_safe_water,
  code = 'geoAreaCode',
  country = 'geoAreaName',
  region = 'parentName',
  iso = 'ISO3',
  urbanisation = "location_desc",
  sanitation_access = "value_2019",
)

# Remove duplicates
proportion_of_safe_water <- proportion_of_safe_water%>%
  distinct()

proportion_of_safe_water
```

## Mortality rate with unintentional poisoning

```{r}
#| label: select specific columns for mortality rate
mortality_rate_unintentional_poisoning <- select(
  mortality_rate_unintentional_poisoning,
  code = 'geoAreaCode',
  country = 'geoAreaName',
  region = 'parentName',
  iso = 'ISO3',
  gender = 'sex_desc',
  MR_poisoning = 'value_2019'
)

# drop rows if contains at least one NA value
mortality_rate_unintentional_poisoning <- na.omit(mortality_rate_unintentional_poisoning)

# Remove duplicates
mortality_rate_unintentional_poisoning <- mortality_rate_unintentional_poisoning%>%
  distinct()

#check for empty row
any(is.na(mortality_rate_unintentional_poisoning))

mortality_rate_unintentional_poisoning
```

## Proportion of hand washing facilities

```{r}
#| label: select specific columns for population with basic handwashing facilities
population_with_basic_handwashing_facilities <- select(
  population_with_basic_handwashing_facilities,
  code = 'geoAreaCode',
  country = 'geoAreaName',
  region = 'parentName',
  iso = 'ISO3',
  urbanisation = 'location_desc',
  handwash_access = 'value_2019'
)

# drop rows if contains at least one NA value
population_with_basic_handwashing_facilities <- na.omit(population_with_basic_handwashing_facilities)

# Remove duplicates
population_with_basic_handwashing_facilities <- population_with_basic_handwashing_facilities%>%
  distinct()

#check for empty row
any(is.na(mortality_rate_unintentional_poisoning))

population_with_basic_handwashing_facilities
```

## Joining all 4 indicators

```{r}

countries_tb <- left_join(
  mortality_rate_unintentional_poisoning,
  population_with_basic_handwashing_facilities,
  by = join_by(country, iso)
)
  
countries_tb <- left_join(
  countries_tb,
  mortality_rate_unsafe_water,
  by = join_by(iso)
) 
  
countries_tb <- left_join(
  countries_tb,
  proportion_of_safe_water,
  by = join_by(iso, urbanisation)
) |>  
  mutate(
    iso = case_match(
      iso,
      "COD" ~ "ZAR",
      "ROU" ~ "ROM",
      "TLS" ~ "TMP",
      "XKX" ~ "KSV",
      .default = iso
    )
  )

countries_tb
```

## Clean data

Remove certain columns and rename column for cleaner a look

```{r}
clean_datatable <- select(countries_tb, 
                          -code.y, -code.x,
                          -region.y, -region.x,
                          -code.x.x, code.y.y, 
                          -country.x, -country.y,
                          -region.x.x, -region.y.y, 
                          -iso)  
# Rearrange
clean_datatable <- clean_datatable %>%
  select(country, 
         urbanisation, 
         gender, 
         handwash_access,  
         sanitation_access, 
         MR_poisoning, 
         MR_unsafe_water)

datatable(clean_datatable)
```

<hr/>


```{r}
#| warning: false
library(readr)
library(knitr)
library(dplyr)
library(factoextra)
library(cluster)
library(GGally)
library(data.table)
library(sns)
library(plotly)
library(countrycode)
library(wbstats)
```

```{r}
kable(head(clean_datatable))

df <- clean_datatable %>%
  filter(urbanisation == "All areas", gender == "Both sexes") |>
  select(-urbanisation, -gender)

kable(head((df)))
df

numeric_cols <-
  c("handwash_access",
    "sanitation_access",
    "MR_poisoning",
    "MR_unsafe_water")
numeric_df <- df[numeric_cols]
scaled_df <- scale(numeric_df)
kable(head((scaled_df)))

fviz_nbclust(scaled_df, kmeans, method = "wss")
```

```{r}
# class(scaled_df_table)
# country <- df$country
# scaled_df_table_with_country <- cbind(country, scaled_df_table)
# kable(head(scaled_df_table_with_country))
# class(scaled_df_table_with_country)
```


```{r}
scaled_df_table <- data.table(scaled_df)
k <- kmeans(scaled_df_table, centers = 3)
scaled_df_table[, cluster := as.factor(k$cluster)]
colnames(scaled_df_table)

country <- df$country
scaled_df_table_with_country <- cbind(country, scaled_df_table)


gg<- ggpairs(
  scaled_df_table_with_country,
  aes(colour = cluster, text = country),
  diag = list(continuous = "barDiag"),
  columns = c(
    "handwash_access",
    "sanitation_access",
    "MR_poisoning",
    "MR_unsafe_water"
  ),
  columnLabels = c("% Hand-wash\n Facility","% Sanitation\n Services","% Death by\n Posion","% Death by\n Unsafe Water")
)

gg
```

```{r}
#| fig-height: 10
#| fig-width: 10
a <- ggplotly(gg, tooltip = c("country")
              #, width = 800, height = 800
              )
a
```

**1. Red cluster = Low sanitation and High mortality rate\
2. Green cluster = High sanitation and Low mortality rate\
3. Blue cluster = Low mortality rate**

```{r}
head(scaled_df_table_with_country)

scaled_df_table_with_cc <- 
  scaled_df_table_with_country |>
  mutate(code = countrycode(country, origin = 'country.name', destination = 'wb'))
head(scaled_df_table_with_cc)

# # pop data
# get_population <- function(country_code) {
#   indicator <- "SP.POP.TOTL"  # Population indicator code
#   data <- wb(indicator = indicator, country = country_code, startdate = 2021, enddate = 2021)
#   population <- data[["value"]]  # Extract population value
#   return(population)
# }
```

```{r}
get_region <- function(country_code) {
  indicator <- "AG.SRF.TOTL.K2"  # Surface area indicator code
  data <- wb(indicator = indicator, country = country_code, startdate = 2021, enddate = 2021)
  region <- data[["region"]]$value  # Extract region value
  return(region)
}


```

```{r}
countries_sf <- read_sf("./data/WB_countries_Admin0.geojson")
# head(countries_sf)
countries_sf <- st_drop_geometry(countries_sf) |>
  select(WB_A3, REGION_WB, INCOME_GRP, POP_EST)
kable(head(countries_sf))
head(countries_sf)

unique(countries_sf$REGION_WB)

dataset <- merge(scaled_df_table_with_cc, countries_sf, by.x = "code", by.y = "WB_A3")
kable(head(dataset))
head(dataset)

any_na <- any(is.na(dataset))
any_na


```

```{r}
library(MASS)

```

```{r}
shuffle_index <- sample(1:nrow(dataset))
dataset <- dataset[shuffle_index, ]
kable(head(dataset))

column_types <- sapply(dataset, class)
print(column_types)

unique(dataset$cluster)
unique(dataset$REGION_WB)
unique(dataset$INCOME_GRP)

x <- dataset$cluster
data.frame(levels = unique(x), value = as.numeric(unique(x)))

kable(head(dataset))
# dataset <- dataset[, c("handwash_access", "sanitation_access", "MR_poisoning", "MR_unsafe_water", "cluster", "REGION_WB", "INCOME_GRP", "POP_EST")]
# dataset <- dataset |> select(code)
# class(dataset)
# 
# class(clean_datatable)
# 
# 
# msd <- read_csv("data/indicator_3.9.2.csv",show_col_types = FALSE)
# class(msd)

head(dataset)

# clean_dataset <- dataset[, c("cluster", "REGION_WB", "INCOME_GRP", "POP_EST")]
  





# clean_dataset <- dataset[, c("cluster", "REGION_WB", "INCOME_GRP", "POP_EST")] |>
#   mutate(
#     region = factor(
#       REGION_WB,
#       levels = c(1, 2, 3, 4, 5, 6),
#       labels = c(
#         'Sub-Saharan Africa',
#         'South Asia',
#         'Middle East & North Africa',
#         'Europe & Central Asia',
#         'East Asia & Pacific',
#         'Latin America & Caribbean'
#       )
#     ),
#     income = factor(
#       INCOME_GRP,
#       levels = c(1, 2, 3, 4),
#       labels = c(
#         '5. Low income',
#         '4. Lower middle income',
#         '3. Upper middle income',
#         '2. High income: nonOECD'
#       )
#     ))

setnames(dataset, "INCOME_GRP", "income")
setnames(dataset, "REGION_WB", "region")
setnames(dataset, "POP_EST", "pop")

dataset <- dataset[, c("cluster", "region", "income", "pop")]

dataset$income <- factor(dataset$income, levels = c(
  '5. Low income',
  '4. Lower middle income',
  '3. Upper middle income',
  '2. High income: nonOECD'
), labels = c(1, 2, 3, 4))

dataset$region <- factor(dataset$region, levels = c(
        'Sub-Saharan Africa',
        'South Asia',
        'Middle East & North Africa',
        'Europe & Central Asia',
        'East Asia & Pacific',
        'Latin America & Caribbean'
), labels = c(1, 2, 3, 4, 5, 6))

any_na <- any(is.na(dataset))
any_na

clean_dataset <- dataset

glimpse(clean_dataset)



```

```{r}
library(rpart)
library(rpart.plot)
library(caret)

```



```{r}
# create_train_test <- function(data, size = 0.8, train = TRUE) {
#     n_row = nrow(data)
#     total_row = size * n_row
#     train_sample < - 1: total_row
#     if (train == TRUE) {
#         return (data[train_sample, ])
#     } else {
#         return (data[-train_sample, ])
#     }
# }
# 
# 
# data_train <- create_train_test(clean_dataset, 0.8, train = TRUE)
# data_test <- create_train_test(clean_dataset, 0.8, train = FALSE)
# dim(data_train)
# dim(data_test)

# clean_dataset <- as_tibble(clean_dataset)

# sample_data = sample.split(clean_dataset, SplitRatio = 0.75)
# train_data <- subset(clean_dataset, sample_data == TRUE)

# test_data <- subset(clean_dataset, sample_data == FALSE)
# 
# dim(train_data)
```

```{r}
create_train_test <- function(data, size = 0.75, train = TRUE) {
    n_row <- nrow(data)
    total_row <- size * n_row
    train_sample <- seq_len(total_row)
    if (train) {
        return (data[train_sample, ])
    } else {
        return (data[-train_sample, ])
    }
}


data_train <- create_train_test(clean_dataset, 0.75, train = TRUE)
data_test <- create_train_test(clean_dataset, 0.75, train = FALSE)
dim(data_train)
dim(data_test)

prop.table(table(data_train$cluster))
prop.table(table(data_test$cluster))

fit <- rpart(cluster~., data = data_train, method = 'class')
rpart.plot(fit)
```

```{r}
trainRowNumbers <- createDataPartition(clean_dataset$cluster, p=0.75, list=FALSE)
train <- clean_dataset[trainRowNumbers,]
test <- clean_dataset[-trainRowNumbers,]
dim(train); dim(test) 

prop.table(table(train$cluster))
prop.table(table(test$cluster))

tree_model <- rpart(cluster~., data = train, method="class") 
rpart.plot(tree_model)
rpart.plot(tree_model, extra = 2)

prediction <-predict(tree_model, data = test, type="class")
prediction
# table_mat <- table(test$cluster, prediction)
# table_mat
# 
# accuracy_Test <- sum(diag(table_mat)) / sum(table_mat)
# print(paste('Accuracy for test', accuracy_Test))
```


